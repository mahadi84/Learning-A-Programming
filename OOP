
OOP


01. Data Abstraction (Data hide) 
02. Inheritance(Reusability)
03. Encapsulation(hiding data and complexity)
04. Polymorphism(Object to take many forms)

================================
A. Class and Object 
B. 1>Abstract Class Vs Interface, 2>Traits
C. Property and Method(Constructor, Deconstructor, Abstract) 
D. Access Modifiers
E. 'this' keyword


================= 01. Data Abstraction (Data hide) =============================

-hide the complex implementation details and show only the essential features of an object to a developer
-focus on what the object does rather than how it does it.
-allows developers to build systems that are easier to manage, understand, and maintain.

Example:
abstract class Animal {
    // Abstract method (no implementation)
    public abstract void makeSound();

    // Concrete method
    public void sleep() {
        System.out.println("Sleeping...");
    }
}

class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof Woof");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.makeSound();
        dog.sleep();
    }
}



============================ 02. Inheritance(Code Reusability, Method Overriding, Extended Functionality )==================================
Inheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows a new class to inherit properties and behavior (methods) from an existing class. 
The new class called a subclass (or derived class), inherits the fields and methods of the superclass (or base class). 
Inheritance promotes code reusability and can lead to a hierarchical classification.


============================ 03. Encapsulation(hiding data, access control and complexity) ============================
-bundling the data (fields) and methods (functions) into a single unit or class and restricting access to some of the object's components. 
-using access modifiers such as private, protected, and public.
-Getter and setter methods.

Example:
Bank Account: Let's consider a real-world example of a bank account. We'll encapsulate the account balance and provide methods to interact with the balance.
public class BankAccount {
    // Private fields to store account information
    private String accountNumber;
    private String accountHolderName;
    private double balance;

    // Constructor to initialize the account
    public BankAccount(String accountNumber, String accountHolderName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = initialBalance;
    }

    // Getter method for account number
    public String getAccountNumber() {
        return accountNumber;
    }

    // Getter method for account holder name
    public String getAccountHolderName() {
        return accountHolderName;
    }

    // Getter method for balance
    public double getBalance() {
        return balance;
    }

    // Method to deposit money
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount);
        } else {
            System.out.println("Invalid deposit amount");
        }
    }

    // Method to withdraw money
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount);
        } else {
            System.out.println("Invalid withdrawal amount or insufficient balance");
        }
    }
}

------------
// Main.java
public class Main {
    public static void main(String[] args) {
        // Creating a new bank account
        BankAccount account = new BankAccount("123456789", "John Doe", 1000.0);

        // Displaying initial balance
        System.out.println("Account Holder: " + account.getAccountHolderName());
        System.out.println("Account Number: " + account.getAccountNumber());
        System.out.println("Initial Balance: " + account.getBalance());

        // Depositing money
        account.deposit(500.0);
        System.out.println("Balance after deposit: " + account.getBalance());

        // Withdrawing money
        account.withdraw(200.0);
        System.out.println("Balance after withdrawal: " + account.getBalance());
    }
}



============================ 04. Polymorphism(Object to take many forms) ==============================
-allows objects of different classes to be treated as objects of a common superclass. 
-way to perform a single action in different forms, enabling flexibility and the ability to extend code with minimal changes.

There are two primary types of polymorphism:
1. Static/Compile-time Polymorphism (Overloading):
        -Different methods with the same name but different parameters
        
        Example in Java:
        class Calculator {
            public int add(int a, int b) {
                return a + b;
            }
        
            public double add(double a, double b) {
                return a + b;
            }
        }

2. Dynamic/Runtime Polymorphism (Overriding)
    -Achieved through method overriding
    -A subclass provides a specific implementation of a method inherited from a superclass
    
    Example in Java:
    Java
    class Animal {
        public void makeSound() {
            System.out.println("Animal makes a sound");
        }
    }
    
    class Dog extends Animal {
        @Override
        public void makeSound() {
            System.out.println("Dog barks");   
    
        }
    }

===========================================================================
-------------------------------Others -------------------------------------
===========================================================================

--------------------------- A) Class and Object------------------------------
Class
-A class is a blueprint or template that defines the properties (attributes) and behaviors (methods) that the objects created from the class will have. 
-It doesn’t represent any data by itself but serves as a model for creating objects. 

Object
-An object is an instance of a class. 
-When a class is defined, no memory is allocated until an object of that class is created. 
-Each object has its own data set and can use the methods defined in the class. 



--------------------------- B. 1>Abstract Class Vs Interface, 2>Traits ---------------------------------------------
Abstract Class: 
An abstract class can have both abstract methods (without implementation) and concrete methods (with implementation). It can also have member variables and constructors.

Example:
abstract class Animal {
    String name;
    Animal(String name) {
        this.name = name;
    }
    // Abstract method (no implementation)
    abstract void makeSound();
    // Concrete method
    void sleep() {
        System.out.println(name + " is sleeping.");
    }
}

class Dog extends Animal {
    Dog(String name) {
        super(name);
    }
    @Override
    void makeSound() {
        System.out.println(name + " says: Woof Woof");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("Buddy");
        dog.makeSound();
        dog.sleep();
    }
}

INTERFACE:
An interface can only have abstract methods (until Java 8, which introduced default and static methods).
All methods in an interface are implicitly public and abstract. 
Interfaces cannot have constructors or member variables (except static final constants).

Example:
interface Animal {
    // Abstract method
    void makeSound();
    // Default method (introduced in Java 8)
    default void sleep() {
        System.out.println("Animal is sleeping.");
    }
}

class Dog implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Dog says: Woof Woof");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.makeSound();
        dog.sleep();
    }
}

Traits:
 -you can achieve similar functionality using interfaces with default methods, introduced in Java 8. 
Traits allow you to compose classes from reusable components, avoiding code duplication and enhancing modularity.

Traits Concept:
Traits are essentially a way to share methods between classes without using inheritance. 
They provide a set of methods that can be used by any class that includes the trait. 
This is particularly useful for adding common functionality to classes that are not related by inheritance.

interface Flyable {
    default void fly() {
        System.out.println("Flying...");
    }
}

interface Swimmable {
    default void swim() {
        System.out.println("Swimming...");
    }
}

class Duck implements Flyable, Swimmable {
    // Duck can fly and swim
}

class Fish implements Swimmable {
    // Fish can only swim
}

public class Main {
    public static void main(String[] args) {
        Duck duck = new Duck();
        duck.fly();
        duck.swim();

        Fish fish = new Fish();
        fish.swim();
    }
}



--------------------------- C. Property and Method(Constructor, Deconstructor, Abstract) ---------------------
Properties: Represented by member variables within a class.
Abstract Method: Declared without implementation in an abstract class; subclasses must provide the implementation.
Destructor (Finalizer): Java does not have destructors like C++. Instead, it has a finalize() method called by the garbage collector, but its use is discouraged due to unpredictability and performance issues..
Constructor: A special method with Class name. is called when an object is instantiated. It is used to initialize the object’s properties.
    Example:
    public class Car {
        private String model;
        private int year;
    
        // Constructor
        public Car(String model, int year) {
            this.model = model;
            this.year = year;
        }
    
        // Method to display car details
        public void displayDetails() {
            System.out.println("Model: " + model + ", Year: " + year);
        }
    
        public static void main(String[] args) {
            Car car = new Car("Toyota", 2020);
            car.displayDetails();
        }
    }


--------------------------- D. Access Modifiers --------------------------------------------------------------

Public: Least restrictive, accessible from anywhere.
Private: Most restrictive, accessible only within the class.
Protected: Accessible within the same package and subclasses.
Default: Accessible only within the same package.

--------------------------- E. 'this' keyword  ---------------------------------------------------------------

-"this" is used to refer to the current object.
-It helps distinguish between instance variables and parameters with the same name.
-It can be used for constructor chaining, returning the current object, and passing the current object as a parameter.
-The this keyword is a powerful tool in Java that helps manage object references and ensures clarity in your code

